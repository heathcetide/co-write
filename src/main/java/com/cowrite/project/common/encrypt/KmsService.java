package com.cowrite.project.common.encrypt;import org.springframework.stereotype.Service;import javax.crypto.Cipher;import javax.crypto.spec.SecretKeySpec;import java.security.KeyPair;import java.security.KeyPairGenerator;import java.security.NoSuchAlgorithmException;import java.util.Base64;@Servicepublic class KmsService {    // ----- AES 对称加密配置 -----    private static final String AES_ALGORITHM = "AES";    // 示例密钥（16字节），实际项目中请从安全的配置中加载或使用密钥管理服务    private static final String AES_KEY = "1234567890123456";    // ----- RSA 非对称加密配置 -----    private static final String RSA_ALGORITHM = "RSA";    private final KeyPair rsaKeyPair;    public KmsService() {        // 初始化 RSA 密钥对        try {            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(RSA_ALGORITHM);            keyPairGenerator.initialize(2048); // 密钥长度可根据需求调整            this.rsaKeyPair = keyPairGenerator.generateKeyPair();        } catch (NoSuchAlgorithmException e) {            throw new RuntimeException("初始化 RSA 密钥对失败", e);        }    }    /**     * 根据指定的加密算法对明文进行加密     *     * @param plainText 明文字符串     * @param algorithm 加密算法标识，例如 "AES" 或 "RSA"     * @return 加密后的字符串（经过 Base64 编码）     */    public String encrypt(String plainText, String algorithm) {        if ("AES".equalsIgnoreCase(algorithm)) {            return encryptAES(plainText);        } else if ("RSA".equalsIgnoreCase(algorithm)) {            return encryptRSA(plainText);        }        throw new IllegalArgumentException("不支持的加密算法: " + algorithm);    }    /**     * 根据指定的加密算法对密文进行解密     *     * @param cipherText 密文字符串（Base64 编码）     * @param algorithm  加密算法标识，例如 "AES" 或 "RSA"     * @return 解密后的明文字符串     */    public String decrypt(String cipherText, String algorithm) {        if ("AES".equalsIgnoreCase(algorithm)) {            return decryptAES(cipherText);        } else if ("RSA".equalsIgnoreCase(algorithm)) {            return decryptRSA(cipherText);        }        throw new IllegalArgumentException("不支持的解密算法: " + algorithm);    }    // ---------------- AES 加密/解密 ----------------    /**     * 使用 AES 算法对明文进行加密     *     * @param plainText 明文字符串     * @return Base64 编码后的密文     */    public String encryptAES(String plainText) {        try {            Cipher cipher = Cipher.getInstance(AES_ALGORITHM);            SecretKeySpec keySpec = new SecretKeySpec(AES_KEY.getBytes("UTF-8"), AES_ALGORITHM);            cipher.init(Cipher.ENCRYPT_MODE, keySpec);            byte[] encryptedBytes = cipher.doFinal(plainText.getBytes("UTF-8"));            return Base64.getEncoder().encodeToString(encryptedBytes);        } catch (Exception e) {            throw new RuntimeException("AES 加密错误", e);        }    }    /**     * 使用 AES 算法对密文进行解密     *     * @param cipherText Base64 编码后的密文     * @return 解密后的明文     */    public String decryptAES(String cipherText) {        try {            Cipher cipher = Cipher.getInstance(AES_ALGORITHM);            SecretKeySpec keySpec = new SecretKeySpec(AES_KEY.getBytes("UTF-8"), AES_ALGORITHM);            cipher.init(Cipher.DECRYPT_MODE, keySpec);            byte[] decodedBytes = Base64.getDecoder().decode(cipherText);            byte[] decryptedBytes = cipher.doFinal(decodedBytes);            return new String(decryptedBytes, "UTF-8");        } catch (Exception e) {            throw new RuntimeException("AES 解密错误", e);        }    }    // ---------------- RSA 加密/解密 ----------------    /**     * 使用 RSA 算法对明文进行加密     *     * @param plainText 明文字符串     * @return Base64 编码后的密文     */    public String encryptRSA(String plainText) {        try {            Cipher cipher = Cipher.getInstance(RSA_ALGORITHM);            cipher.init(Cipher.ENCRYPT_MODE, rsaKeyPair.getPublic());            byte[] encryptedBytes = cipher.doFinal(plainText.getBytes("UTF-8"));            return Base64.getEncoder().encodeToString(encryptedBytes);        } catch (Exception e) {            throw new RuntimeException("RSA 加密错误", e);        }    }    /**     * 使用 RSA 算法对密文进行解密     *     * @param cipherText Base64 编码后的密文     * @return 解密后的明文     */    public String decryptRSA(String cipherText) {        try {            Cipher cipher = Cipher.getInstance(RSA_ALGORITHM);            cipher.init(Cipher.DECRYPT_MODE, rsaKeyPair.getPrivate());            byte[] decodedBytes = Base64.getDecoder().decode(cipherText);            byte[] decryptedBytes = cipher.doFinal(decodedBytes);            return new String(decryptedBytes, "UTF-8");        } catch (Exception e) {            throw new RuntimeException("RSA 解密错误", e);        }    }    public static void main(String[] args) {        // 实例化 KmsService（注意：在 Spring 项目中该类由容器管理，这里仅作演示）        KmsService kmsService = new KmsService();        String plainText = "Hello, CodeForge!";        // ----- AES 对称加密示例 -----        System.out.println("=== AES 对称加密 ===");        String aesCipher = kmsService.encrypt(plainText, "AES");        System.out.println("AES 加密后的密文：");        System.out.println(aesCipher);        String aesDecrypted = kmsService.decrypt(aesCipher, "AES");        System.out.println("AES 解密后的明文：");        System.out.println(aesDecrypted);        // ----- RSA 非对称加密示例 -----        System.out.println("\n=== RSA 非对称加密 ===");        String rsaCipher = kmsService.encrypt(plainText, "RSA");        System.out.println("RSA 加密后的密文：");        System.out.println(rsaCipher);        String rsaDecrypted = kmsService.decrypt(rsaCipher, "RSA");        System.out.println("RSA 解密后的明文：");        System.out.println(rsaDecrypted);    }}